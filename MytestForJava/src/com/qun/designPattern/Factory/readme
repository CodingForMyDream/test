1，普通工厂类 SendFactory.java
	首先创建工厂对象，根据参数动态创建对象，传入参数有误不能正确处理；
2，静态工厂类 SendStaticFactory.java
	工厂类中的方法定义为静态方法，不需要工厂实例；工厂类提供的不同方法获取不同的实例；
3，反射工厂类 SendReflectFactory.java
	根据传入参数，通过反射生成实例对象，工厂类的最少改动	
4，抽象工厂类
	所有工厂实现一个Provider接口，所有创建的工厂用Provider接收
	Provider provider = new SendMailFactory();	
	
	
	
桥接模式（Bridge）（将抽象化与实现化解耦，使得二者可以独立变化）
桥接模式具备和工厂模式类似的实现
最典型的例子就是JDBC。JDBC API(Sun)提供抽象部分，各个JDBC驱动厂商(Oracle, Mysql...)提供实现部分。
新的JDBC驱动可以“即插即用”在JDBC API中，而不需要修改我们调用者的代码。
这就是所谓的抽象部分(JDBC API)与它的实现部分(JDBC Driver)分离。
从宏观角度JDBC可以称为桥模式，但是从微观角度，JDBC中又使用了很多其他设计模式，比如工厂模式，策略模式等等